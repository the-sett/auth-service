/*
 * Creates the opening section of an output file, if one is required.
 */
file_open(catalogue, package) ::= <<
file_open
>>

/*
 * Generates the output for a bean in the specified catalogue.
 */
for_bean(catalogue, package, decorator, fields, extraFields) ::= <<
<if(decorator.entitySubType)>
<entity_service(catalogue=catalogue, package=package, decorator=decorator, name=decorator.name)>
<endif>
>>

/*
 * Creates the closing section of an output file, if one is required.
 */
file_close() ::= <<
file_close
>>

/*
 * Creates a bean class for an entity type, with name/type fields, for a given catalogue model.
 */
entity_service(catalogue, package, decorator, name) ::= <<
<service_interface(catalogue=catalogue, package=package, decorator=decorator, name=name)>
>>

/*
 * Creates a service interface for a top-level entity.
 */
service_interface(catalogue, package, decorator, name) ::= <<
module <name; format="ccu">.Service exposing (..)

import Platform.Cmd exposing (Cmd)
import Result
import Http
import Http
import Http.Decorators
import Json.Decode as Decode exposing (..)
import Json.Encode as Encode exposing (..)
import Task exposing (Task)
import Model exposing (..)

type Msg
    = FindAll (Result.Result Http.Error (List Model.<name; format="ccu">))
    | FindByExample (Result.Result Http.Error (List Model.<name; format="ccu">))
    | Create (Result.Result Http.Error Model.<name; format="ccu">)
    | Retrieve (Result.Result Http.Error Model.<name; format="ccu">)
    | Update (Result.Result Http.Error Model.<name; format="ccu">)
    | Delete (Result.Result Http.Error String)


invokeFindAll : String -> (Msg -> msg) -> Cmd msg
invokeFindAll root msg =
    findAllTask root 
        |> Http.send FindAll
        |> Cmd.map msg

invokeFindByExample : String -> (Msg -> msg) -> Model.<name; format="ccu"> -> Cmd msg
invokeFindByExample root msg example =
    findByExampleTask root example
        |> Http.send FindByExample
        |> Cmd.map msg


invokeCreate : String -> (Msg -> msg) -> Model.<name; format="ccu"> -> Cmd msg
invokeCreate root msg model =
    createTask root model
        |> Http.send Create
        |> Cmd.map msg

invokeRetrieve : String -> (Msg -> msg) -> String -> Cmd msg
invokeRetrieve root msg id =
    retrieveTask root id
        |> Http.send Retrieve
        |> Cmd.map msg

invokeUpdate : String -> (Msg -> msg) -> String -> Model.<name; format="ccu"> -> Cmd msg
invokeUpdate root msg id model =
    updateTask root id model
        |> Http.send Update
        |> Cmd.map msg

invokeDelete : String -> (Msg -> msg) -> String -> Cmd msg
invokeDelete root msg id =
    let
       delete result = Delete \<| Result.map (\() -> id) result
    in
     deleteTask root id
        |> Http.send delete
        |> Cmd.map msg

type alias Callbacks model msg =
    { findAll : List (Model.<name; format="ccu">) -> model -> ( model, Cmd msg )
    , findAllError : Http.Error -> model -> ( model, Cmd msg )
    , findByExample : List (Model.<name; format="ccu">) -> model -> ( model, Cmd msg )
    , findByExampleError : Http.Error -> model -> ( model, Cmd msg )
    , create : Model.<name; format="ccu"> -> model -> ( model, Cmd msg )
    , createError : Http.Error -> model -> ( model, Cmd msg )
    , retrieve : Model.<name; format="ccu"> -> model -> ( model, Cmd msg )
    , retrieveError : Http.Error -> model -> ( model, Cmd msg )
    , update : Model.<name; format="ccu"> -> model -> ( model, Cmd msg )
    , updateError : Http.Error -> model -> ( model, Cmd msg )
    , delete : String -> model -> ( model, Cmd msg )
    , deleteError : Http.Error -> model -> ( model, Cmd msg )
    , error : Http.Error -> model -> ( model, Cmd msg )
    }

callbacks : Callbacks model msg
callbacks =
    { findAll = \_ -> \model -> ( model, Cmd.none )
    , findAllError = \_ -> \model -> ( model, Cmd.none )
    , findByExample = \_ -> \model -> ( model, Cmd.none )
    , findByExampleError = \_ -> \model -> ( model, Cmd.none )
    , create = \_ -> \model -> ( model, Cmd.none )
    , createError = \_ -> \model -> ( model, Cmd.none )
    , retrieve = \_ -> \model -> ( model, Cmd.none )
    , retrieveError = \_ -> \model -> ( model, Cmd.none )
    , update = \_ -> \model -> ( model, Cmd.none )
    , updateError = \_ -> \model -> ( model, Cmd.none )
    , delete = \_ -> \model -> ( model, Cmd.none )
    , deleteError = \_ -> \model -> ( model, Cmd.none )
    , error = \_ -> \model -> ( model, Cmd.none )
    }


update : Callbacks model msg -> Msg -> model -> ( model, Cmd msg )
update callbacks action model =
    case (Debug.log "<name; format="cc">.api" action) of
        FindAll result ->
            (case result of
                Ok <name; format="cc"> ->
                    callbacks.findAll <name; format="cc"> model

                Err httpError ->
                  <errorHandler("findAll")>
            )

        FindByExample result ->
            (case result of
                Ok <name; format="cc"> ->
                    callbacks.findByExample <name; format="cc"> model

                Err httpError ->
                    <errorHandler("findByExample")>
            )

        Create result ->
            (case result of
                Ok <name; format="cc"> ->
                    callbacks.create <name; format="cc"> model

                Err httpError ->
                    <errorHandler("create")>
            )

        Retrieve result ->
            (case result of
                Ok <name; format="cc"> ->
                    callbacks.retrieve <name; format="cc"> model

                Err httpError ->
                    <errorHandler("retrieve")>
            )

        Update result ->
            (case result of
                Ok <name; format="cc"> ->
                    callbacks.update <name; format="cc"> model

                Err httpError ->
                    <errorHandler("update")>
            )

        Delete result ->
            (case result of
                Ok id ->
                    callbacks.delete id model

                Err httpError ->
                    <errorHandler("delete")>
            )

routes root =
    { findAll = root ++ "<name; format="cc">"
    , findByExample = root ++ "<name; format="cc">/example"
    , create = root ++ "<name; format="cc">"
    , retrieve = root ++ "<name; format="cc">/"
    , update = root ++ "<name; format="cc">/"
    , delete = root ++ "<name; format="cc">/"
    }

findAllTask : String -> Http.Request (List <name; format="ccu">)
findAllTask root =
    Http.request
    { method = "GET"
    , headers = []
    , url = routes root |> .findAll
    , body = Http.emptyBody
    , expect = Http.expectJson (Decode.list <name; format="cc">Decoder)
    , timeout = Nothing
    , withCredentials = False
    }

findByExampleTask : String -> <name; format="ccu"> -> Http.Request (List <name; format="ccu">)
findByExampleTask root model =
    Http.request
    { method = "POST"
    , headers = []
    , url = routes root |> .findByExample
    , body = Http.jsonBody \<| <name; format="cc">Encoder model
    , expect = Http.expectJson (Decode.list <name; format="cc">Decoder)
    , timeout = Nothing
    , withCredentials = False
    }

createTask : String -> <name; format="ccu"> -> Http.Request <name; format="ccu">
createTask root model =
    Http.request
    { method = "POST"
    , headers = []
    , url = routes root |> .create
    , body = Http.jsonBody \<| <name; format="cc">Encoder model
    , expect = Http.expectJson <name; format="cc">Decoder
    , timeout = Nothing
    , withCredentials = False
    }


retrieveTask : String -> String -> Http.Request <name; format="ccu">
retrieveTask root id =
    Http.request
    { method = "GET"
    , headers = []
    , url = (routes root |> .retrieve) ++ id
    , body = Http.emptyBody
    , expect = Http.expectJson <name; format="cc">Decoder
    , timeout = Nothing
    , withCredentials = False
    }


updateTask : String -> String -> <name; format="ccu"> -> Http.Request <name; format="ccu">
updateTask root id model =
    Http.request
    { method = "PUT"
    , headers = []
    , url = (routes root |> .update) ++ id
    , body = Http.jsonBody \<| <name; format="cc">Encoder model
    , expect = Http.expectJson <name; format="cc">Decoder
    , timeout = Nothing
    , withCredentials = False
    }


deleteTask : String -> String -> Http.Request ()
deleteTask root id =
    Http.request
   { method = "DELETE"
   , headers = []
   , url = (routes root |> .delete) ++ id
   , body = Http.emptyBody
   , expect = Http.expectStringResponse (\_ -> Ok ())
   , timeout = Nothing
   , withCredentials = False
   }
>>

errorHandler(callback) ::= <<
let
  (modelSpecific, cmdSpecific) = callbacks.<callback>Error httpError model
  (modelGeneral, cmdGeneral) = callbacks.error httpError modelSpecific
in
  (modelGeneral, Cmd.batch [cmdSpecific, cmdGeneral])
>>
